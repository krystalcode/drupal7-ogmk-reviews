<?php
/**
 * @file
 * Code for the Commerce Marketplace Reviews feature.
 */

include_once 'ogmk_reviews.features.inc';
include_once 'ogmk_reviews.blocks.inc';

/**
 * Hooks.
 */

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ogmk_reviews_form_review_node_form_alter(&$form, &$form_state, $form_id) {
  // Get the line item's id since it is used in a couple of places later on.
  // It is be better to get the line item id from the form rathern than the
  // query parameter, since this is the value is going to be submitted.
  $language = $form['ogmk_line_item_ref']['#language'];
  $line_item_id = $form_state['entityreference_prepopulate']['node']['review']['ogmk_line_item_ref'][0];

  global $user;
  if ((int) $user->uid !== 1) {
    // Validate that the current user is the owner of the line item being
    // reviewed.

    // The user is stored in the order and not in the line item.
    $line_item = commerce_line_item_load($line_item_id);
    $order = commerce_order_load($line_item->order_id);

    // Deny access to the form.
    /**
     * @Issue(
     *   "Throw an Access Denied page instead so that the line item block isn't
     *   rendered either"
     *   type="improvement"
     *   priority="normal"
     *   labels="security"
     * )
     */
    if ((int) $user->uid !== (int) $order->uid) {
      $form['#access'] = FALSE;
    }

    // The "product" node will be fetched from the line item and will be set when
    // the "review" node will be saved.
    $form['ogmk_node_product_ref']['#access'] = FALSE;

    // The "og_shop_ref" field will be hidden by the
    // "entityreference_prepopulate" module. However, if query parameter is a
    // Shop that the user is not a member of, the field will be displayed.
    // We want to hide it in all cases, as if the query parameter is wrong,
    // something is wrong.
    // We also wanted it hidden in the edit form as well.
    $form['og_shop_ref']['#access'] = FALSE;

    // Hide the "ogmk_line_item_ref" field in the edit form.
    $form['ogmk_line_item_ref']['#access'] = FALSE;
  }

  // Redirect to the Review page if one already exists for the requested line
  // item. There should only be one Review for each line item.
  $review = ogmk_base_line_item_get_referencing_review($line_item_id);
  if (!empty($review)) {
    drupal_goto('node/' . $review->nid);
  }

  // Action buttons improvements.
  $form['actions']['submit']['#value'] = t('Submit');
  $form['actions']['submit']['#attributes']['class'][] = 'fa fa-check';

  /**
   * @Issue(
   *   "Validate that the current user is the owner of the line item being
   *   reviewed upon form submission"
   *   type="bug"
   *   priority="low"
   *   labels="security"
   * )
   * @Issue(
   *   "Block adding a review for a line item that already has one using
   *   hook_node_presave"
   *   type="bug"
   *   priority="low"
   *   labels="data"
   * )
   * @Issue(
   *   "Add an info alert with information about how to make a review"
   *   type="improvement"
   *   priority="low"
   * )
   * @Issue(
   *   "Test if OG permissions properly work, preventing to add a review to a
   *   line item/shop that shouldn't be possible"
   *   type="bug"
   *   priority="normal"
   *   labels="security, testing"
   * )
   * @Issue(
   *   "Improve the stars rating appearance and remove/hide the dropdown"
   *   type="bug"
   *   priority="normal"
   *   labels="ux"
   * )
   * @Issue(
   *   "Move the action buttons to the right and separate them from the main
   *   form"
   *   type="bug"
   *   priority="normal"
   *   labels="ux"
   * )
   * @Issue(
   *   "Disallow users to edit their reviews, or give them a limited time to do so"
   *   type="bug"
   *   priority="normal"
   * )
   * @Issue(
   *   "Populate the 'ogmk_node_product_ref' field when the node is saved"
   *   type="bug"
   *   priority="normal"
   *   labels="data"
   * )
   */
}

/**
 * Implements hook_entity_info_alter().
 */
function ogmk_reviews_entity_info_alter(&$entity_info) {
  // View mode for displaying a "commerce_line_item" (and its associated
  // "commerce_product" and "node") together with its review or review add/edit
  // form.
  $entity_info['commerce_line_item']['view modes']['ogmk_review'] = array(
    'label' => t('OGMK Review'),
    'custom settings' => FALSE,
  );
}

/**
 * Implements hook_node_presave().
 *
 * Make sure the entityreference fields for the Product and the Shop of the
 * review correctly correspond to the ones of the associated line item.
 */
function ogmk_reviews_node_presave($node) {
  if ($node->type !== 'review') {
    return;
  }

  // Get the line item of the review.
  $review_wrapper = entity_metadata_wrapper('node', $node);
  $line_item = $review_wrapper->ogmk_line_item_ref->value();
  $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);

  // Get the "product" node referencing the line item's "commerce_product"
  // entity.
  $commerce_product = $line_item_wrapper->commerce_product->value();
  $node_product = commerce_ogmk_products_product_get_node($commerce_product);

  // Populate the "ogmk_node_product_ref" field if it is empty or if it has
  // changed (which shouldn't happen anyways).
  $currentNodeProductValue = $review_wrapper->ogmk_node_product_ref->value();
  if (!$currentNodeProductValue || $currentNodeProductValue != $node_product->nid) {
    $node->ogmk_node_product_ref[LANGUAGE_NONE][0]['target_id'] = $node_product->nid;
  }

  // Make sure that the "og_shop_ref" field is populated with the correct "shop"
  // node that corresponds to the line item. A user could possibly pass on a
  // different shop via the URL query parameter.
  $node_shop = $line_item_wrapper->og_shop_ref->value();
  $currentNodeShopValue = $review_wrapper->og_shop_ref->value();
  if (!$currentNodeShopValue || $currentNodeShopValue != $node_shop->nid) {
    $node->og_shop_ref[LANGUAGE_NONE][0]['target_id'] = $node_shop->nid;
  }
}

/**
 * Public API.
 */

/**
 * Check if there is a "review" node referencing a line item.
 *
 * @param int|object $line_item
 *   The line item id or object for whom to check if there is a referencing
 *   node.
 *
 * @return boolean|int
 *   FALSE if there is no node referencing the line item.
 *   The node id otherwise.
 */
function ogmk_base_line_item_has_referencing_review($line_item) {
  $options = array('limit' => 1);
  $result  = ogmk_base_line_item_has_referencing_nodes($line_item, 'review', $options);

  if (!$result) {
    return FALSE;
  }

  return current($result)->nid;
}

/**
 * Get the "review" node referencing a line item, if there is one.
 *
 * @param int|object $line_item
 *   The line item id or object for whom to check if there is a referencing
 *   node.
 *
 * @return null|object
 *   NULL if there is no node referencing the line item.
 *   The node object otherwise.
 */
function ogmk_base_line_item_get_referencing_review($line_item) {
  $options = array('limit' => 1);
  $result  = ogmk_base_line_item_get_referencing_nodes($line_item, 'review', $options);

  if (!$result) {
    return NULL;
  }

  return current($result);
}
